// see https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin



// see https://openapi-generator.tech/docs/plugins/#gradle

// Validating a single specification
openApiValidate {
    inputSpec.set("$rootDir/contract/happraisal-openapi-docs.yaml")
}

// Before compiling the sources, we have to generate some classes via the openApiGenerate task.
tasks.getByName("compileJava").dependsOn("openApiGenerate")


//sourceSets {
//    openApiGenerateQQQ {
//        java {
//            compileClasspath += sourceSets.main.output
//            runtimeClasspath += sourceSets.main.output
//            srcDir file('build/generated-openapi-springboot')
//        }
//        resources.srcDir file('src/system-test/resources')
//    }
//}


/*
sourceSets {
    openApi {
        java {
            // see https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_source_sets

            // Not working:
            // srcDir "${buildDir}/generated-openapi-springboot/src/main/java"

            // Not working but it doesn't block:
            // Deprecated?
//            srcDir(project.layout.buildDirectory.dir("generated-openapi-springboot").get().asFile.path)

            // Not working but it doesn't block:
            // Deprecated?
            srcDir file("${buildDir}/generated-openapi-springboot/src/main/java")

            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output



//            compileClasspath += sourceSets.main.output
//            runtimeClasspath += sourceSets.main.output
        }
    }
}
 */


// TODO search the documentation about this and explain why it's needed.
sourceSets {
    main {
        java {
            srcDir file("${buildDir}/generated-openapi-springboot/src/main/java")
        }
    }
}

openApiGenerate {

    inputSpec = "$rootDir/contract/happraisal-openapi-docs.yaml"
    verbose = Boolean.TRUE

    // Generate a set of server side stub classes suitable for SpringBoot:
    generatorName = "spring"
    outputDir = project.layout.buildDirectory.dir("generated-openapi-springboot").get().asFile.path

//    sourceSets["main"].java {
//        srcDir("$outputDir/src/main/java")
//    }

//    apiPackage = "dev.t3d.happraisal.controller.api"
    apiPackage = "dev.t3d.happraisal.controller2"
    packageName = "dev.t3d.happraisal.controller2"
    invokerPackage = "dev.t3d.happraisal.config"
    modelPackage = "dev.t3d.happraisal.web.dto"

    generateModelTests = false
    generateApiTests = false
    generateModelDocumentation = true

    // add:
    // library: "spring-cloud", to add the implementation of the default method as
    // getRequest().ifPresent(request
    //....
    // see https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html
    // feign was created by Netflix
    // library: "spring-cloud",

    // see later:
    // delegatePattern: "true",

    // For configOptions see: https://openapi-generator.tech/docs/generators/spring
    configOptions = [
            dateLibrary: "java8",
            useOptional: "true",
            hideGenerationTimestamp: "true",
            interfaceOnly: "true",
            library: "spring-boot",
//            library: "spring-cloud",
            useTags: "true",
            swaggerDocketConfig: "false",
            swaggerAnnotations: "false",
            apiFirst: "false",
//            configPackage: "dev.t3d.happraisal.config",
//            basePackage: "dev.t3d.happraisal",
            useSpringController: "false",
            useSpringBoot3: "true"
    ]


    // other settings omitted


//    globalProperties.set([
//            validateSpec: "true",
//            outputDir: "openapi-generated",
//            inputSpec: "openapi/happraisal-openapi-docs.yaml",
//            packageName: "dev.t3d.happraisal.controller",
//            apiPackage: "dev.t3d.happraisal.controller.api",
//            modelDocs: "false",
//            apis: "false"
//    ])
}


dependencies {
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
}

//// Define a task for validating one specification
//task validateGoodSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask) {
//    inputSpec.set("$rootDir/petstore-v3.0.yaml")
//}
//
//// Define a task for validating another specification
//task validateBadSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask) {
//    inputSpec.set("$rootDir/petstore-v3.0-invalid.yaml")
//}
//
//// Define a task for batch validations
//task validateSpecs(dependsOn: ['validateGoodSpec', 'validateBadSpec'])