plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'io.freefair.lombok' version "8.6"

    id "com.diffplug.spotless" version "6.23.3"
    id("org.sonarqube") version "4.2.1.3168"
}

group = 'dev.t3d'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    runtimeOnly 'org.postgresql:postgresql:42.7.3'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.13.0'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '3.2.5'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

apply from: "gradle/unit-test.gradle"
apply from: "gradle/integration-test.gradle"
apply from: "gradle/system-test.gradle"
apply from: "gradle/spotless.gradle"


systemTest {
    shouldRunAfter integrationTest
}

tasks.register('copyDockerCompose', Copy) {
    ["./src/integration-test/resources","./src/system-test/resources"].forEach {dest ->
        copy {
                from(layout.projectDirectory.file("./docker/docker-compose-postgresql.yml"))
            into layout.projectDirectory.dir(dest)

        }
        copy {
            from(layout.projectDirectory.file("./docker/.env"))
            into layout.projectDirectory.dir(dest)

        }
    }

}
tasks.compileJava.dependsOn('copyDockerCompose')

jacocoTestReport {
    dependsOn(integrationTest)
    dependsOn(systemTest)
    executionData(
            file("${project.buildDir}/jacoco/integrationTest.exec"),
            file("${project.buildDir}/jacoco/test.exec"),
            file("${project.buildDir}/jacoco/systemTest.exec")
    )


    reports {
        // for sonarqube
        xml.required = true
        xml.destination(file("${project.buildDir}/reports/jacoco/all-tests/jacocoAllTestReport.xml"))
        // for dev
        html.required = true
        html.destination file("${project.buildDir}/reports/jacoco/all-tests/html")
    }
}

sonar {
    properties {
        property "sonar.projectkey", System.getenv('SONAR_PROJECT_KEY')
        property "sonar.projectName", System.getenv('SONAR_PROJECT_NAME')
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/all-tests/jacocoAllTestReport.xml"
        property "sonar.sources", "src/main,build.gradle,gradle"
        property "sonar.tests", "src/test,src/integration-test,src/system-test"
        property "sonar.junit.reportPaths", "build/test-results/test,build/test-results/integrationTest,build/test-results/systemTest"
        property "sonar.organization", System.getenv('SONAR_ORGANIZATION')
        property "sonar.token", System.getenv('SONAR_TOKEN')
    }
}
